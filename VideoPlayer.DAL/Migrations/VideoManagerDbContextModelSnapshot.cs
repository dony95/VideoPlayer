// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VideoPlayer.DAL;
using VideoPlayer.Model;

namespace VideoPlayer.DAL.Migrations
{
    [DbContext(typeof(VideoManagerDbContext))]
    partial class VideoManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VideoPlayer.Model.Cartoon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoriesString")
                        .HasColumnName("Categories");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("ImdbURL");

                    b.Property<string>("ImgURL");

                    b.Property<int>("Language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name_ENG");

                    b.Property<string>("SubtitleURL");

                    b.Property<string>("TrailerURL");

                    b.Property<string>("VideoURL")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.ToTable("Cartoons");
                });

            modelBuilder.Entity("VideoPlayer.Model.Episode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<int>("EpisodeNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SeasonId");

                    b.Property<string>("SubtitleURL");

                    b.Property<string>("VideoURL")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("VideoPlayer.Model.Film", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoriesString")
                        .HasColumnName("Categories");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("ImdbURL");

                    b.Property<string>("ImgURL");

                    b.Property<int>("Length");

                    b.Property<string>("ListActors");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name_ENG");

                    b.Property<string>("SubtitleURL");

                    b.Property<string>("TrailerURL");

                    b.Property<string>("VideoURL")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("VideoPlayer.Model.Season", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SeasonNumber");

                    b.Property<int>("SeriesId");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("SeriesId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("VideoPlayer.Model.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoriesString")
                        .HasColumnName("Categories");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("ImdbURL");

                    b.Property<string>("ImgURL");

                    b.Property<int>("Language");

                    b.Property<string>("ListActors");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name_ENG");

                    b.Property<string>("TrailerURL");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("VideoPlayer.Model.Episode", b =>
                {
                    b.HasOne("VideoPlayer.Model.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VideoPlayer.Model.Season", b =>
                {
                    b.HasOne("VideoPlayer.Model.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
